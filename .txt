const socket = io();

const clientsTotal = document.getElementById('clients-total');

const messageContainer = document.getElementById('message-container');
const messageForm = document.getElementById('message-form');
const messageInput =  document.getElementById('message-input');
const nameInput = document.getElementById('name-input');

const messageTone = new Audio('/Whatsapp Message.mp3')

socket.on('clients-total' , (data) => {
    clientsTotal.innerText = `Total clients ${data}`
})

messageForm.addEventListener('submit' , (e) => {
    e.preventDefault();
   sendMessage();
})

function sendMessage ()  {
    if(messageInput.value === '') return
    const data = {
       name : nameInput.value,
        message : messageInput.value,
        dateTime : new Date()
    }
    socket.emit('message' , data);
    addMessageToUI(true , data) ;
    messageInput.value = '';
}

socket.on('chat-message' , (data) => {
    messageTone.play();
    addMessageToUI(false , data);
})

function addMessageToUI (isOwnMessage , data) {
    clearFeedBack();
    const element = `
      <li class="${isOwnMessage ? "message-right" : 'message-left'}">
          <p class="message">
           ${data.message}
            <span>${data.name}  Updated ${moment(data.dateTime).fromNow()}</span>
          </p>   
        </li>`

        messageContainer.innerHTML += element;
        scrollToBottom();
}


function scrollToBottom () {
    messageContainer.scrollTop = messageContainer.scrollHeight;

}

messageInput.addEventListener('focus' , (e) => {
    socket.emit('feedback' , {
        feedback : `${nameInput.value} is typing a message`
    })
})

messageInput.addEventListener('keypress' , (e) => {
    socket.emit('feedback' , {
        feedback : `${nameInput.value} is typing a message`
    })
})

messageInput.addEventListener('blur' , (e) => {
    socket.emit('feedback' , {
        feedback : ``
    })
})

socket.on('feedback' , (data) => {
    clearFeedBack();
    const element = `
          <li class="message-feedback">
          <p class="feedback" id="feedback">${data.feedback}</p>
          </li>`
          messageContainer.innerHTML += element;
})


function clearFeedBack () {
   document.querySelectorAll('li.message-feedback').forEach(element => {
    element.parentNode.removeChild(element);
   })
}


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat Application</title>
    <link rel="stylesheet" href="/style.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
      integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
    <div class="main">
      <div class="name">
        <span class="far fa-user"></span>
        <input
          type="text"
          class="name-input"
          id="name-input"
          value="User"
          maxlength="20"
        />
      </div>
      <ul class="message-container" id="message-container">
        <!-- <li class="message-left">
          <p class="message">
           
            <span></span>
          </p>
        </li> -->

        <!-- <li class="message-right">
          <p class="message">

            <span></span>
          </p>
        </li> -->
        <!-- <li class="message-feedback">
          <p class="feedback" id="feedback">sohel is typing a message</p>
        </li> -->
      </ul>

      <form class="message-form" id="message-form">
        <input
          type="text"
          name="message"
          id="message-input"
          class="message-input"
        />
        <div class="v-divider"></div>
        <button type="submit" class="send-button">
          Send <span><i class="fas fa-paper-plane"></i></span>
        </button>
      </form>
    </div>
    <h3 class="clients-total" id="clients-total">Total Clients : 2</h3>

    <script src="/socket.io/socket.io.js"></script>
             
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js"></script>


    <script src="main.js"></script>
  </body>
</html>

In this code when the user send the massage then show the time of massage instead of user updated a few seconds ago


              <span>${data.name}  Updated ${moment(data.dateTime).fromNow()}</span> 










const socket = io();

const clientsTotal = document.getElementById('clients-total');

const messageContainer = document.getElementById('message-container');
const messageForm = document.getElementById('message-form');
const messageInput =  document.getElementById('message-input');
const nameInput = document.getElementById('name-input');

const messageTone = new Audio('/Whatsapp Message.mp3')

socket.on('clients-total' , (data) => {
    clientsTotal.innerText = `Total clients ${data}`
})

messageForm.addEventListener('submit' , (e) => {
    e.preventDefault();
   sendMessage();
})

function sendMessage ()  {
    if(messageInput.value === '') return
    const data = {
       name : nameInput.value,
        message : messageInput.value,
        dateTime : new Date()
    }
    socket.emit('message' , data);
    addMessageToUI(true , data) ;
    messageInput.value = '';
}

socket.on('chat-message' , (data) => {
    messageTone.play();
    addMessageToUI(false , data);
})

function addMessageToUI (isOwnMessage , data) {
    clearFeedBack();
    const element = `
      <li class="${isOwnMessage ? "message-right" : 'message-left'}">
          <p class="message">
           ${data.message}
            <span>${data.name} • ${moment(data.dateTime).format('h:mm A')}</span>

          </p>   
        </li>`

        messageContainer.innerHTML += element;
        scrollToBottom();
}


function scrollToBottom () {
    messageContainer.scrollTop = messageContainer.scrollHeight;

}

messageInput.addEventListener('focus' , (e) => {
    socket.emit('feedback' , {
        feedback : `${nameInput.value} is typing a message`
    })
})

messageInput.addEventListener('keypress' , (e) => {
    socket.emit('feedback' , {
        feedback : `${nameInput.value} is typing a message`
    })
})

messageInput.addEventListener('blur' , (e) => {
    socket.emit('feedback' , {
        feedback : ``
    })
})

socket.on('feedback' , (data) => {
    clearFeedBack();
    const element = `
          <li class="message-feedback">
          <p class="feedback" id="feedback">${data.feedback}</p>
          </li>`
          messageContainer.innerHTML += element;
})


function clearFeedBack () {
   document.querySelectorAll('li.message-feedback').forEach(element => {
    element.parentNode.removeChild(element);
   })
}





socket.on("message", (data) => {
    socket.emit("chat-message", data);  
});



//saving chat to local storage code 


// function saveMessageToLocalStorage(message) {
//     let messages = JSON.parse(localStorage.getItem("chatMessages")) || [];
    
//     // Limit to last 100 messages
//     if (messages.length >= 100) {
//         messages.shift(); // Remove the oldest message
//     }

//     messages.push(message);
//     localStorage.setItem("chatMessages", JSON.stringify(messages));
// }



// function loadMessagesFromLocalStorage() {
//     let messages = JSON.parse(localStorage.getItem("chatMessages")) || [];
//     const fragment = document.createDocumentFragment();

//     messages.forEach((data) => {
//         const isOwnMessage = data.name === nameInput.value;
//         const li = document.createElement("li");
//         li.className = isOwnMessage ? "message-right" : "message-left";
//         li.innerHTML = `
//           <p class="message">
//            ${data.message}
//             <span>${data.name} • ${moment(data.dateTime).format('h:mm A')}</span>
//           </p>
//         `;
//         fragment.appendChild(li);
//     });

//     messageContainer.appendChild(fragment); // Append all at once
//     scrollToBottom();
// }


// // Load messages when page loads
// document.addEventListener("DOMContentLoaded", loadMessagesFromLocalStorage);
